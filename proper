#!/usr/bin/env bash

###############################################################################
# ERROR: Let the user know if the script fails
###############################################################################

trap 'ret=$?; test $ret -ne 0 && printf "\n\e[31m=====  Proper has failed to complete.  =====\033[0m\n" >&2; exit $ret' EXIT
set -e

###############################################################################
# Check for required functions file
###############################################################################
if [ -e functions ]; then
	cd "$(dirname "${BASH_SOURCE[0]}")" &&
		. "functions"
else
	printf "\n ⚠️  ./functions not found \n"
	exit 1
fi

###############################################################################
# CHECK: Bash version
###############################################################################
check_bash_version

###############################################################################
# Start Message!          http://patorjk.com/software/taag/ ( font: Script )
###############################################################################
start_message

###############################################################################
# CHECK: Internet
###############################################################################
chapter "Checking internet connection"
check_internet_connection

###############################################################################
# CHECK: Proper dir
###############################################################################
# chapter "Checking for Proper directory"
check_proper_dir

###############################################################################
# PROMPT: Password
###############################################################################
chapter "Caching password"
ask_for_sudo

###############################################################################
# PROMPT: SSH Key
###############################################################################
chapter 'Checking for SSH key'
ssh_key_setup

###############################################################################
# INSTALL: Dependencies
###############################################################################
chapter "Installing Dependencies"
if [ -s $cwd/manifest/deps ]; then

	for dep in $(<$cwd/manifest/deps); do
		install_dep_${dep}
	done
else
	print_success_muted "Nothing to install"
fi

###############################################################################
# INSTALL: brews
###############################################################################
chapter "Installing Homebrew packages"
if [ -s $cwd/manifest/brews ]; then

	for brew in $(<$cwd/manifest/brews); do
		install_brews $brew
	done
else
	print_success_muted "Nothing to install"
fi

###############################################################################
# UPDATE: Homebrew
###############################################################################
chapter "Updating Homebrew"
var=$(brew update 2>&1)
if [[ $var == *"Already up-to-date"* ]]; then
	print_success_muted "Homebrew already up-to-date"
else
	printf "  [↓] Homebrew outdated. Updating:\n"
	print_muted "    $var\n"
	print_success "Homebrew updated!"
fi

###############################################################################
# INSTALL: casks
###############################################################################
chapter "Installing casks with Homebrew"
if [ -s $cwd/manifest/casks ]; then

	for cask in $(<$cwd/manifest/casks); do
		install_application_via_brew $cask
	done

else
	print_success_muted "Nothing to install"
fi

###############################################################################
# INSTALL: Mac App Store Apps
###############################################################################
chapter "Installing apps from App Store"
if [ -x mas ]; then

	print_warning "Please install mas-cli first: brew mas. Skipping."

else

	if [ -s $cwd/manifest/mas ]; then
		mas_setup

		for app in $(<$cwd/manifest/mas); do
			KEY="${app%%::*}"
			VALUE="${app##*::}"
			install_application_via_app_store $KEY $VALUE
		done
	fi

	print_success_muted "Nothing to install"
fi

###############################################################################
# CLEAN: Homebrew files
###############################################################################
chapter "Cleaning up Homebrew files"
brew_clean=$(brew cleanup -s)
if [[ $brew_clean == *"Nothing to do"* ]]; then
	print_success_muted "Homebrew files already clean"
else
	if [[ -z $brew_clean ]]; then
		print_muted "    $brew_clean\n"
	fi
	print_success_muted "Homebrew files cleaned!"
fi
# print_success_muted "Homebrew cleaned"

###############################################################################
# INSTALL: npm packages
###############################################################################
chapter "Installing npm packages"
if [ -s $cwd/manifest/npm ]; then

	for pkg in $(<$cwd/manifest/npm); do
		KEY="${pkg%%::*}"
		VALUE="${pkg##*::}"
		install_npm_packages $KEY $VALUE
	done
else
	print_success_muted "Nothing to install"
fi

###############################################################################
# INSTALL: composer
###############################################################################
chapter "Installing Composer Packages"
if [ -s $cwd/manifest/composer ]; then
	for packages in $(<$cwd/manifest/composer); do
		install_composer_packages $packages
	done
else
	print_success_muted "Nothing to install"
fi

###############################################################################
# OPTIONAL: Custom scripts
###############################################################################
chapter "Custom Scripts"
if [ -f "$HOME/.proper/custom" ]; then
	if ask "Found custom scripts at "$HOME/.proper/custom". Would like you like run this file?" Y; then
		. "$HOME/.proper/custom"
		printf "\n  Custom scripts found. \n"
	else
		print_success_muted "Custom scripts declined. Skipped."
	fi
else
	print_success_muted "No custom scripts found in "$HOME/.proper-custom". Skipping."
fi

###############################################################################
# Finished
###############################################################################
end_message
