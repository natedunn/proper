###############################################################################
# Dependencies
###############################################################################

install_dep_xcode() {
    if type xcode-select >&- && xpath=$( xcode-select --print-path ) &&
        test -d "${xpath}" && test -x "${xpath}" ; then
        print_success_muted "Xcode already installed. Skipping."
    else
        step "Installing Xcode…"
        xcode-select --install
        print_success "Xcode installed!"
    fi

    if [ ! -d "$HOME/.bin/" ]; then
        _mkdir "$HOME/.bin"
    fi
}

install_dep_oh_my_zsh() {
    if [[ $SHELL != /bin/zsh ]] ; then
        step "Installing (Oh My) Zsh…"
        sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
            print_success "Using Zsh $ZSH_VERSION!"
    else
        print_success_muted "(Oh My) Zsh already installed. Skipping."
    fi
}

install_dep_node() {
    if [ -x nvm ]; then
        step "Installing NVM…"
        curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash
        print_success "NVM installed!"
        step "Installing latest Node…"
        nvm install node
        nvm use node
        nvm run node --version
        nodev=$(node -v)
        print_success "Using Node $nodev!"
    else
        print_success_muted "NVM/Node already installed. Skipping."
    fi
}

install_dep_homebrew() {
    if ! [ -x "$(command -v brew)" ]; then
        step "Installing Homebrew…"
        curl -fsS 'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby
        export PATH="/usr/local/bin:$PATH"
        print_success "Homebrew installed!"
    else
        print_success_muted "Homebrew already installed. Skipping."
    fi

    if brew list | grep -Fq brew-cask; then
        step "Uninstalling old Homebrew-Cask…"
        brew uninstall --force brew-cask
        print_success "Homebrew-Cask uninstalled!"
    fi
}

install_dep_composer() {
    if [[ $COMPOSER_IS_INSTALLED -ne 0 ]]; then
        step "Installing (Oh My) Zsh…"
        brew install composer
        print_success "Composer Installed."
    else
        print_success_muted "Composer already installed. Skipping."
    fi
}

###############################################################################
# Manifest Items
###############################################################################
install_brews() {
    if test ! "$(brew list | grep $brew)"; then
        echo_install "Installing $brew"
		brew install $brew >/dev/null
		print_in_green "${bold}✓ installed!${normal}\n"
	else
		print_success_muted "$brew already installed. Skipped."
    fi
}

install_application_via_brew() {
    if [[ ! $(brew cask list | grep $cask) ]]; then
        echo_install "Installing $cask"
        brew cask install $cask --appdir=/Applications >/dev/null
        print_in_green "${bold}✓ installed!${normal}\n"
    else
    	print_success_muted "$cask already installed. Skipped."
    fi
}

install_application_via_app_store() {
	if ! mas list | grep $1 &> /dev/null; then
		echo_install "Installing $2"
		mas install $1 >/dev/null
		print_in_green "${bold}✓ installed!${normal}\n"
	else
		print_success_muted "$2 already installed. Skipped."
	fi
}

install_composer_packages() {
    if [ ! -d "$HOME/.composer/vendor/$1" ]; then
        echo_install "Installing $1"
        composer global require $1 -q
		print_in_green "${bold}✓ installed!${normal}\n"
    else
        composer global update $1 -q
        print_success_muted "$1 already installed & up-to-date."
    fi
}

install_npm_packages() {
	if [[ $(cli_is_installed $2) == 0 ]]; then
		echo_install "Installing $1"
		npm install $1 -g --silent
		print_in_green "${bold}✓ installed!${normal}\n"
	else
		print_success_muted "$1 already installed. Skipped."
	fi
}